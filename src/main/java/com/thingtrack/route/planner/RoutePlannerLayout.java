package com.thingtrack.route.planner;

import java.util.ArrayList;
import java.util.List;

import org.vaadin.vol.Bounds;
import org.vaadin.vol.Marker;
import org.vaadin.vol.MarkerLayer;
import org.vaadin.vol.OpenLayersMap;
import org.vaadin.vol.OpenStreetMapLayer;
import org.vaadin.vol.Point;
import org.vaadin.vol.PolyLine;
import org.vaadin.vol.Style;
import org.vaadin.vol.VectorLayer;

import com.thingtrack.route.planner.model.Location;
import com.thingtrack.route.planner.model.MapCoordinates;
import com.thingtrack.route.planner.model.Route;
import com.thingtrack.route.planner.ui.RouteForm;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.ExternalResource;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.VerticalSplitPanel;

@SuppressWarnings("serial")
public class RoutePlannerLayout extends CustomComponent {

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private VerticalSplitPanel verticalSplitPanel_2;
	@AutoGenerated
	private TabSheet dataTabSheet;
	@AutoGenerated
	private OpenLayersMap routeOpenLayersMap;
	@AutoGenerated
	private VerticalLayout verticalLayout_1;
	@AutoGenerated
	private RouteForm routeForm_1;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private OpenStreetMapLayer openStreetMapLayer;
	private MarkerLayer stopsMakerLayer;
	private VectorLayer routeStrokeVectorLayer;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public RoutePlannerLayout() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		routeForm_1.setData(this);
		
		// Map definition
		openStreetMapLayer = new OpenStreetMapLayer();
		stopsMakerLayer = new MarkerLayer();
		routeStrokeVectorLayer = new VectorLayer();

		// Apply Map Layers
		routeOpenLayersMap.addLayer(openStreetMapLayer);
		routeOpenLayersMap.addLayer(routeStrokeVectorLayer);
		routeOpenLayersMap.addLayer(stopsMakerLayer);

		routeOpenLayersMap.setCenter(43.32, 5.42);

	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// verticalLayout_1
		verticalLayout_1 = buildVerticalLayout_1();
		mainLayout.addComponent(verticalLayout_1);

		// verticalSplitPanel_2
		verticalSplitPanel_2 = buildVerticalSplitPanel_2();
		mainLayout.addComponent(verticalSplitPanel_2);
		mainLayout.setExpandRatio(verticalSplitPanel_2, 1.0f);

		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_1() {
		// common part: create layout
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("300px");
		verticalLayout_1.setHeight("100.0%");
		verticalLayout_1.setMargin(false);

		// routeForm_1
		routeForm_1 = new RouteForm();
		routeForm_1.setImmediate(false);
		routeForm_1.setWidth("100.0%");
		routeForm_1.setHeight("100.0%");
		verticalLayout_1.addComponent(routeForm_1);
		verticalLayout_1.setExpandRatio(routeForm_1, 1.0f);

		return verticalLayout_1;
	}

	@AutoGenerated
	private VerticalSplitPanel buildVerticalSplitPanel_2() {
		// common part: create layout
		verticalSplitPanel_2 = new VerticalSplitPanel();
		verticalSplitPanel_2.setImmediate(false);
		verticalSplitPanel_2.setWidth("100.0%");
		verticalSplitPanel_2.setHeight("100.0%");
		verticalSplitPanel_2.setMargin(true);

		// routeOpenLayersMap
		routeOpenLayersMap = new OpenLayersMap();
		routeOpenLayersMap.setImmediate(false);
		routeOpenLayersMap.setWidth("100.0%");
		routeOpenLayersMap.setHeight("100.0%");
		verticalSplitPanel_2.addComponent(routeOpenLayersMap);

		// dataTabSheet
		dataTabSheet = new TabSheet();
		dataTabSheet.setImmediate(false);
		dataTabSheet.setWidth("100.0%");
		dataTabSheet.setHeight("100.0%");
		verticalSplitPanel_2.addComponent(dataTabSheet);

		return verticalSplitPanel_2;
	}

	public void drawRouteStroke(Route route) {

		List<Point> routePoints = new ArrayList<Point>();

		for (MapCoordinates coordinates : route.getShape().getShapePoints())
			routePoints.add(new Point(coordinates.getLng(), coordinates
					.getLat()));

		PolyLine routePath = new PolyLine();
		Style routeStrokeStyle = new Style();
		routeStrokeStyle.setStrokeWidth(5);
		routeStrokeStyle.setStrokeColor("#7D26CD");
		routeStrokeStyle.setStrokeOpacity(0.5);
		routePath.setCustomStyle(routeStrokeStyle);
		Point[] points = new Point[routePoints.size()];
		routePoints.toArray(points);
		routePath.setPoints(points);
		routeStrokeVectorLayer.addVector(routePath);
		
		//Create Stop Markers
		createStopMarkers(route.getLocations());
				
		//Extend the map to the current route
		Bounds bounds = new Bounds(points);
		routeOpenLayersMap.zoomToExtent(bounds);

		getApplication().getMainWindow().showNotification("Kilometros totales: " + route.getDistance()
						+ " y consumo aproximado:" + route.getFuelUsed());
	}
	
	private void createStopMarkers(List<Location> locations){
		
		int stopAsciiCounter = 65;
		
		for(int i=0; i < locations.size(); i++){
			
			Location location = locations.get(i);
			
			Marker stopMarker = new Marker(location.getDisplayLatLng().getLng(),
					location.getDisplayLatLng().getLat());
			
			if(i == 0)
				stopMarker.setIcon(new ExternalResource("http://icons.mqcdn.com/icons/stop.png?text=" + new String(new char[]{(char) stopAsciiCounter}) +"&color=green1"), 22, 28);
			
			else if(i == locations.size()-1)
				stopMarker.setIcon(new ExternalResource("http://icons.mqcdn.com/icons/stop.png?text=" + new String(new char[]{(char) stopAsciiCounter}) +"&color=red1"), 22, 28);
			else stopMarker.setIcon(new ExternalResource("http://icons.mqcdn.com/icons/stop.png?text=" + new String(new char[]{(char) stopAsciiCounter})), 22, 28);
			
			
			stopsMakerLayer.addMarker(stopMarker);
			
			stopAsciiCounter++;
		
		}
		
	}

}
