package com.thingtrack.route.planner;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;

import org.vaadin.vol.Bounds;
import org.vaadin.vol.Marker;
import org.vaadin.vol.MarkerLayer;
import org.vaadin.vol.OpenLayersMap;
import org.vaadin.vol.OpenStreetMapLayer;
import org.vaadin.vol.Point;
import org.vaadin.vol.PolyLine;
import org.vaadin.vol.Popup;
import org.vaadin.vol.Popup.PopupStyle;
import org.vaadin.vol.Style;
import org.vaadin.vol.VectorLayer;

import com.invient.vaadin.charts.InvientCharts;
import com.invient.vaadin.charts.InvientCharts.DecimalPoint;
import com.invient.vaadin.charts.InvientCharts.Series;
import com.invient.vaadin.charts.InvientCharts.SeriesType;
import com.invient.vaadin.charts.InvientCharts.XYSeries;
import com.invient.vaadin.charts.InvientChartsConfig;
import com.invient.vaadin.charts.InvientChartsConfig.AxisBase.AxisTitle;
import com.invient.vaadin.charts.InvientChartsConfig.CategoryAxis;
import com.invient.vaadin.charts.InvientChartsConfig.ColumnConfig;
import com.invient.vaadin.charts.InvientChartsConfig.HorzAlign;
import com.invient.vaadin.charts.InvientChartsConfig.Legend;
import com.invient.vaadin.charts.InvientChartsConfig.NumberYAxis;
import com.invient.vaadin.charts.InvientChartsConfig.Position;
import com.invient.vaadin.charts.InvientChartsConfig.Stacking;
import com.invient.vaadin.charts.InvientChartsConfig.VertAlign;
import com.invient.vaadin.charts.InvientChartsConfig.XAxis;
import com.invient.vaadin.charts.InvientChartsConfig.YAxis;
import com.thingtrack.route.planner.model.Leg;
import com.thingtrack.route.planner.model.Location;
import com.thingtrack.route.planner.model.Maneuver;
import com.thingtrack.route.planner.model.MapCoordinates;
import com.thingtrack.route.planner.model.Route;
import com.thingtrack.route.planner.ui.RouteForm;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.event.MouseEvents.ClickListener;
import com.vaadin.terminal.ExternalResource;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Panel;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.VerticalSplitPanel;

@SuppressWarnings("serial")
public class RoutePlannerLayout extends CustomComponent {

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private Panel panel_1;
	@AutoGenerated
	private VerticalLayout verticalLayout_2;
	@AutoGenerated
	private VerticalSplitPanel verticalSplitPanel_2;
	@AutoGenerated
	private HorizontalLayout chartsLayout;
	@AutoGenerated
	private OpenLayersMap routeOpenLayersMap;
	@AutoGenerated
	private VerticalLayout verticalLayout_1;
	@AutoGenerated
	private RouteForm routeForm_1;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private OpenStreetMapLayer openStreetMapLayer;
	private MarkerLayer stopsMakerLayer;
	private VectorLayer routeStrokeVectorLayer;

	private InvientCharts routeDistancesChart;
	private InvientCharts routeTimesChart;
	private InvientCharts routeFuelUsedChart;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public RoutePlannerLayout() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		routeForm_1.setData(this);

		// Map definition
		openStreetMapLayer = new OpenStreetMapLayer();
		stopsMakerLayer = new MarkerLayer();
		routeStrokeVectorLayer = new VectorLayer();

		// Apply Map Layers
		routeOpenLayersMap.addLayer(openStreetMapLayer);
		routeOpenLayersMap.addLayer(routeStrokeVectorLayer);
		routeOpenLayersMap.addLayer(stopsMakerLayer);

		routeOpenLayersMap.setCenter(43.32, 5.42);

		// Build route charts
		routeDistancesChart = buildCharts("Distancia por ruta",
				"Kil√≥metros (km)");
		chartsLayout.addComponent(routeDistancesChart);

		routeTimesChart = buildCharts("Tiempo por ruta", "Tiempo (seg)");
		chartsLayout.addComponent(routeTimesChart);

	}

	public void drawRouteStroke(Date routeStartDate, Route route) {

		List<Point> routePoints = new ArrayList<Point>();

		routeStrokeVectorLayer.removeAllComponents();

		for (MapCoordinates coordinates : route.getShape().getShapePoints())
			routePoints.add(new Point(coordinates.getLng(), coordinates
					.getLat()));

		PolyLine routePath = new PolyLine();
		Style routeStrokeStyle = new Style();
		routeStrokeStyle.setStrokeWidth(5);
		routeStrokeStyle.setStrokeColor("#7D26CD");
		routeStrokeStyle.setStrokeOpacity(0.5);
		routePath.setCustomStyle(routeStrokeStyle);
		Point[] points = new Point[routePoints.size()];
		routePoints.toArray(points);
		routePath.setPoints(points);
		routeStrokeVectorLayer.addVector(routePath);

		// Create Stop Markers
		createStopMarkers(routeStartDate, route);

		// Extend the map to the current route
		Bounds bounds = new Bounds(points);
		routeOpenLayersMap.zoomToExtent(bounds);

		getApplication().getMainWindow().showNotification(
				"Kilometros totales: " + route.getDistance()
						+ " y consumo aproximado:" + route.getFuelUsed());
	}

	private void createStopMarkers(Date startingRouteDate, Route route) {

		int stopAsciiCounter = 65;

		Calendar calendar = GregorianCalendar.getInstance();
		calendar.setTime(startingRouteDate != null ? startingRouteDate : new Date());

		List<Marker> createdMarkers = new ArrayList<Marker>();

		stopsMakerLayer.removeAllComponents();

		for (int i = 0; i < route.getLocations().size(); i++) {

			Location location = route.getLocations().get(i);

			// Create the marker
			Marker stopMarker = new Marker(
					location.getDisplayLatLng().getLng(), location
							.getDisplayLatLng().getLat());

			if (i == 0)
				stopMarker.setIcon(new ExternalResource(
						"http://icons.mqcdn.com/icons/stop.png?text="
								+ new String(
										new char[] { (char) stopAsciiCounter })
								+ "&color=green1"), 22, 28);

			else if (i == route.getLocations().size() - 1)
				stopMarker.setIcon(new ExternalResource(
						"http://icons.mqcdn.com/icons/stop.png?text="
								+ new String(
										new char[] { (char) stopAsciiCounter })
								+ "&color=red1"), 22, 28);
			else
				stopMarker
						.setIcon(
								new ExternalResource(
										"http://icons.mqcdn.com/icons/stop.png?text="
												+ new String(
														new char[] { (char) stopAsciiCounter })),
								22, 28);

			createdMarkers.add(stopMarker);

			stopsMakerLayer.addMarker(stopMarker);

			stopAsciiCounter++;

		}

		// Create Pop up markers
		createMarkerPopups(route, startingRouteDate, createdMarkers);

	}

	private void createMarkerPopups(Route route, Date startingRouteDate,
			List<Marker> markers) {

		Calendar calendar = GregorianCalendar.getInstance();
		calendar.setTime(startingRouteDate != null ? startingRouteDate : new Date());

		for (int i = 0; i < markers.size(); i++) {

			Marker marker = markers.get(i);

			final Popup markerPopup = new Popup();
			markerPopup.setPopupStyle(PopupStyle.FRAMED_CLOUD);
			markerPopup.setLon(marker.getLon());
			markerPopup.setLat(marker.getLat());

			VerticalLayout popupLayout = new VerticalLayout();
			popupLayout.setMargin(true);
			popupLayout.setSpacing(true);
			popupLayout.setHeight("150px");
			popupLayout.setWidth("250px");
			markerPopup.addComponent(popupLayout);

			markerPopup.setAnchor(marker);

			DateField arrivalStopDate = new DateField("LLegada");
			arrivalStopDate.setResolution(DateField.RESOLUTION_MIN);
			DateField checkoutStopDate = new DateField("Salida");
			checkoutStopDate.setResolution(DateField.RESOLUTION_MIN);

			popupLayout.addComponent(arrivalStopDate);
			popupLayout.addComponent(checkoutStopDate);
			popupLayout.setExpandRatio(checkoutStopDate, 1.0F);

			if (i == 0) {

				arrivalStopDate.setValue(calendar.getTime());
				checkoutStopDate.setValue(calendar.getTime());
			}

			else {
				Leg leg = route.getLegs().get(i - 1);
				calendar.add(Calendar.SECOND, leg.getTime());

				arrivalStopDate.setValue(calendar.getTime());
				checkoutStopDate.setValue(calendar.getTime());
			}

			marker.addClickListener(new ClickListener() {

				@Override
				public void click(com.vaadin.event.MouseEvents.ClickEvent event) {

					routeOpenLayersMap.addPopup(markerPopup);
				}
			});
		}

	}

	public void createManeuverPopup(Maneuver maneuver) {

		Popup maneuverPopup = new Popup(maneuver.getStartPoint().getLng(),
				maneuver.getStartPoint().getLat(), "<p><b>"
						+ maneuver.getNarrative() + "</b></p>");
		maneuverPopup.setPopupStyle(PopupStyle.FRAMED_CLOUD);

		routeOpenLayersMap.addPopup(maneuverPopup);

	}

	private InvientCharts buildCharts(String chartTitle, String yAxisCaption) {

		InvientChartsConfig chartConfig = new InvientChartsConfig();
		chartConfig.getGeneralChartConfig().setType(SeriesType.COLUMN);

		chartConfig.getTitle().setText(chartTitle);

		CategoryAxis xAxis = new CategoryAxis();
		xAxis.setCategories(Arrays.asList("Servicio"));
		LinkedHashSet<XAxis> xAxesSet = new LinkedHashSet<InvientChartsConfig.XAxis>();
		xAxesSet.add(xAxis);
		chartConfig.setXAxes(xAxesSet);

		NumberYAxis yAxis = new NumberYAxis();
		yAxis.setMin(0.0);
		yAxis.setTitle(new AxisTitle(yAxisCaption));
		LinkedHashSet<YAxis> yAxesSet = new LinkedHashSet<InvientChartsConfig.YAxis>();
		yAxesSet.add(yAxis);
		chartConfig.setYAxes(yAxesSet);

		Legend legend = new Legend();
		legend.setPosition(new Position());
		legend.getPosition().setAlign(HorzAlign.RIGHT);
		legend.getPosition().setVertAlign(VertAlign.TOP);
		legend.getPosition().setX(-100);
		legend.getPosition().setY(20);
		legend.setFloating(true);
		legend.setBackgroundColor(new com.invient.vaadin.charts.Color.RGB(255,
				255, 255));
		legend.setBorderWidth(1);
		legend.setShadow(true);
		chartConfig.setLegend(legend);

		chartConfig
				.getTooltip()
				.setFormatterJsFunc(
						"function() {"
								+ " return '<b>'+ this.x +'</b><br/>'+ this.series.name +': '+ this.y +'<br/>'+"
								+ "        'Total: '+ this.point.stackTotal; "
								+ "}");

		ColumnConfig colCfg = new ColumnConfig();
		colCfg.setStacking(Stacking.NORMAL);
		chartConfig.addSeriesConfig(colCfg);

		InvientCharts chart = new InvientCharts(chartConfig);
		chart.setSizeFull();
		return chart;

	}

	public void drawCharts(Route route) {

		drawRouteDistancesChart(route);
		drawRouteTimesChart(route);
	}

	private void drawRouteDistancesChart(Route route) {

		int letterCounter = 65;
		removeChartSeries(routeDistancesChart);

		for (Leg leg : route.getLegs()) {

			XYSeries seriesData = new XYSeries(buildLabel(letterCounter));
			seriesData
					.setSeriesPoints(getPoints(seriesData, leg.getDistance()));
			routeDistancesChart.addSeries(seriesData);
			letterCounter++;
		}
	}

	private void drawRouteTimesChart(Route route) {

		int letterCounter = 65;
		removeChartSeries(routeTimesChart);

		for (Leg leg : route.getLegs()) {

			XYSeries seriesData = new XYSeries(buildLabel(letterCounter));
			seriesData.setSeriesPoints(getPoints(seriesData, leg.getTime()));
			routeTimesChart.addSeries(seriesData);
			letterCounter++;
		}
	}
	
	private void removeChartSeries(InvientCharts chart){
		
		Set<Series> seriesSet = new CopyOnWriteArraySet(chart.getAllSeries());
		
		for(Series series : seriesSet)
			chart.removeSeries(series);
	}

	private String buildLabel(int letterCounter) {

		StringBuilder label = new StringBuilder();
		label.append(new String(new char[] { (char) letterCounter }));
		label.append("-");
		letterCounter++;
		label.append(new String(new char[] { (char) letterCounter }));

		return label.toString();
	}

	private static LinkedHashSet<DecimalPoint> getPoints(Series series,
			double... values) {
		LinkedHashSet<DecimalPoint> points = new LinkedHashSet<DecimalPoint>();
		for (double value : values) {
			points.add(new DecimalPoint(series, value));
		}
		return points;
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// verticalLayout_1
		verticalLayout_1 = buildVerticalLayout_1();
		mainLayout.addComponent(verticalLayout_1);
		
		// panel_1
		panel_1 = buildPanel_1();
		mainLayout.addComponent(panel_1);
		mainLayout.setExpandRatio(panel_1, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_1() {
		// common part: create layout
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("300px");
		verticalLayout_1.setHeight("100.0%");
		verticalLayout_1.setMargin(false);
		
		// routeForm_1
		routeForm_1 = new RouteForm();
		routeForm_1.setImmediate(false);
		routeForm_1.setWidth("100.0%");
		routeForm_1.setHeight("100.0%");
		verticalLayout_1.addComponent(routeForm_1);
		verticalLayout_1.setExpandRatio(routeForm_1, 1.0f);
		
		return verticalLayout_1;
	}

	@AutoGenerated
	private Panel buildPanel_1() {
		// common part: create layout
		panel_1 = new Panel();
		panel_1.setImmediate(false);
		panel_1.setWidth("100.0%");
		panel_1.setHeight("100.0%");
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		panel_1.setContent(verticalLayout_2);
		
		return panel_1;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("100.0%");
		verticalLayout_2.setHeight("100.0%");
		verticalLayout_2.setMargin(false);
		
		// verticalSplitPanel_2
		verticalSplitPanel_2 = buildVerticalSplitPanel_2();
		verticalLayout_2.addComponent(verticalSplitPanel_2);
		
		return verticalLayout_2;
	}

	@AutoGenerated
	private VerticalSplitPanel buildVerticalSplitPanel_2() {
		// common part: create layout
		verticalSplitPanel_2 = new VerticalSplitPanel();
		verticalSplitPanel_2.setImmediate(false);
		verticalSplitPanel_2.setWidth("100.0%");
		verticalSplitPanel_2.setHeight("100.0%");
		verticalSplitPanel_2.setMargin(true);
		
		// routeOpenLayersMap
		routeOpenLayersMap = new OpenLayersMap();
		routeOpenLayersMap.setImmediate(false);
		routeOpenLayersMap.setWidth("100.0%");
		routeOpenLayersMap.setHeight("100.0%");
		verticalSplitPanel_2.addComponent(routeOpenLayersMap);
		
		// chartsLayout
		chartsLayout = new HorizontalLayout();
		chartsLayout.setImmediate(false);
		chartsLayout.setWidth("100.0%");
		chartsLayout.setHeight("100.0%");
		chartsLayout.setMargin(false);
		verticalSplitPanel_2.addComponent(chartsLayout);
		
		return verticalSplitPanel_2;
	}

}
